org: herickmotta
app: minions-aws-node-rest-api-app
service: minions-aws-node-rest-api-app
frameworkVersion: '2'
package:
  individually: true
plugins:
  - serverless-dynamodb-local
  - serverless-bundle
  - serverless-dotenv-plugin
  - serverless-offline

custom:
  tableName: 'products-table-${self:provider.stage}'
  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      migrate: true
      inMemory: true
      seed: true
    seed:
      domain:
        sources:
          - table: ${self:custom.tableName}
            sources: [src/mocks/products.json]

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: '20201221'
  region: us-east-1
  stage: dev
  iam.role.statements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["ProductsDynamoDBTable", "Arn" ] }
  environment:
    PRODUCTS_TABLE: ${self:custom.tableName}

functions:
  create:
    handler: src/api/product.create
    events:
      - http:
          path: products
          method: post
  list:
    handler: src/api/product.getAll
    events:
      - http:
          path: products
          method: get

resources:
  Resources:
    ProductsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: productId
            AttributeType: S
        KeySchema:
          -
            AttributeName: productId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}
